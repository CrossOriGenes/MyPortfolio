/* <button
        type="button"
        className="login-sc-btns"
        id="google-login-btn"
        onClick={googleLogin}
    >
        <i className="fa-brands fa-google-plus-g" />
        <span>Login with Google</span>
    </button>
    <button type="button" className="login-sc-btns" id="fb-login-btn">
        <i className="fa-brands fa-facebook-f" />
        <span>Login with Facebook</span>
    </button>
    <button
        type="button"
        className="login-sc-btns"
        id="github-login-btn"
    >
        <i className="fa-brands fa-github" />
        <span>Login with Github</span>
    </button> 
*/



const googleLogin = () => {
    window.open("http://localhost:8000/auth/google", "_self");
};

const onLoginSuccess = async () => {
    try {
      const response = await fetch("http://localhost:8000/auth/googleLogin", {
        method: "GET",
        credentials: "include",
        headers: {
          Accept: "application/json",
          "Content-type": "application/json",
          "Access-Control-Allow-Credentials": true,
        },
      });

      const result = await response.json();
      console.log(7, result);

      if (response.ok) {
        if (!authCtx.token) {
          authCtx.login(result.token);
          toast.success(result.msg);
        }
      } else if (response.status === 500) {
        toast.error(result.msg);
      } else {
        toast.error(result.errors);
      }
    } catch (err) {
      console.log(err);
    }
};


export async function fetchPaymentData(signature) {
  try {
    const response = await fetch(`http://localhost:8000/payments/getDetails?sign=${signature}`);

    if (!response.ok) {
      const error = new Error('failed fetching the events!');
      error.code = response.status;
      error.info = await response.json();
      throw error;
    }

    const result = await response.json();
    // console.log(result)
    return result;
  } catch (error) {
    console.log(error)
  }
}

export function loader() {
  // query string code here
    //const signature = '';
  return defer({
    transactionData: fetchPaymentData(signature)
  });
}